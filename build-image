#!/bin/bash -e

PROG=$(basename $0)
PROG_DIR=$(dirname $0)

function usage {
    cat <<EOF 1>&2
usage: $PROG [options...] SOURCEDIR_for_scripts
Options:
  -i IMAGE  Name of the docker image (including tag) to use as package build environment.
  -o DIR    Destination directory to store packages to.
EOF
    exit 1
}

function fatal {
    echo "$PROG: ${1:-"Unknown Error"}" 1>&2
    exit 1
}

function abspath {
    echo $(cd "$1" && pwd)
}


###########################################################################

[[ $# -eq 0 ]] && usage

while getopts "i:o:h" opt; do
    case $opt in
        i)
            image="$OPTARG"
            ;;
        o)
            outdir="$OPTARG"
            ;;
        h)
            usage
            ;;
        *)
            usage
            ;;
    esac
done

shift $(($OPTIND - 1))
# http://cdimage.ubuntu.com/ubuntu-server/bionic/daily-preinstalled/current/bionic-preinstalled-server-arm64+raspi3.img.xz
# This should be the image we want to modify.
base_url="http://cdimage.ubuntu.com/ubuntu-server/bionic/daily-preinstalled/current/"
base_image="bionic-preinstalled-server-arm64+raspi3.img.xz"
base_image_url="${base_url}/${base_image}"
cache_volume=rpi4-imagebuilder-cache

srcdir=$1
#docker_args="-it "
# The bash script & copy log if failure setup doesn't work without the "-dt" docker argument.
docker_args="-dt "
#build_container_name="rpi4-image-build"
#docker_args="--name $build_container_name "

# Check that mandatory parameters are valid
[[ !    "$outdir"        ]] && fatal "output directory was not given (-o DIR)"
[[ ! -d "$outdir"        ]] && fatal "output directory does not exist: $outdir"
[[ !    "$srcdir"        ]] && fatal "source directory not given"
[[ !    "$image"         ]] && fatal "docker image name not given (-i IMAGE)"

# Needed for loopback to work inside container.
#docker_args+="--cap-add=CAP_MKNOD --device-cgroup-rule='b 7:* rmw' "
docker_args+="-v /dev:/dev --privileged "
#docker_args+="--device /dev/loop0 --device /dev/loop-control --device /dev/mapper/control  \
#--device /dev/mapper/* --cap-add SYS_ADMIN --cap-add CAP_MKNOD --security-opt apparmor:unconfined "

# Check that optional parameters are valid
if [[ "$depdir" ]]; then
    [[ ! -d "$depdir" ]] && fatal "dependency directory given but does not exist: $depdir"
    docker_args+="-v $(abspath "$depdir"):/dependencies:ro "
fi

docker_args+="-v $(abspath "$srcdir"):/source-ro:ro -v $(abspath "$outdir"):/output -v $(cd $PROG_DIR; pwd)/build-rpi4.sh:/build-rpi4.sh:ro "

# Pass current UID and GID to container, so that it can change the
# ownership of output files which are otherwise writen to outdir as
# root
docker_args+="-e USER=$(id -u) -e GROUP=$(id -g) "

# Comment following out if you want to keep container after execution
# for debugging
docker_args+="--rm "

check_new_image_hash () {
    echo "* Checking image hash."
    current_output=`curl --silent ${base_url}/SHA1SUMS`
    current=${current_output%% *}
    local_hash_output=`sha1sum $(abspath "$srcdir")/${base_image}.new`
    local=${local_hash_output%% *}
    if [ "$local" == "$current" ]; then
        tee $(abspath "$srcdir")/${base_image}.shasum <<EOF
$local
EOF
    echo "* ${base_image} hash verified."
    mv $(abspath "$srcdir")/${base_image}.new $(abspath "$srcdir")/${base_image}
    else
    echo "* Image hash mismatch."
    hashfail=1
    download_base_image
    fi
}

download_base_image () {
        echo "* Downloading ${base_image} ."
        if [ -e "$(abspath "$srcdir")/$base_image" ] && \
        [ -e "$(abspath "$srcdir")/${base_image}.shasum" ] ; then
            cp $(abspath "$srcdir")/$base_image \
            $(abspath "$srcdir")/${base_image}.bak 2>/dev/null
        fi
        curl -o $(abspath "$srcdir")/${base_image}.new $base_image_url || curl_fail=1
        check_new_image_hash

        if [ "$curl_fail" ]; then 
            echo "* ${base_image} download failed."
            if [ -e "$(abspath "$srcdir")/${base_image}.bak" ] &&
            [ -e "$(abspath "$srcdir")/${base_image}.shasum" ]; then
                mv $(abspath "$srcdir")/${base_image}.bak \
                $(abspath "$srcdir")/$base_image
                echo "* Restoring existing  ${base_image}"
            fi
        fi
        [[ -e "$(abspath "$srcdir")/$base_image" ]] && \
        echo "* Now have local ${base_image} ."
}

check_for_current_image () {
    current_output=`curl --silent ${base_url}/SHA1SUMS`
    current=${current_output%% *}
    local_hash_output=`sha1sum $(abspath "$srcdir")/${base_image}`
    local=${local_hash_output%% *}
    if [ ! "$local" == "$current" ]; then
        echo "Local base image sha1sum is:"
        echo $local
        echo "Remote base image shasum is:"
        echo $current
        echo "* New base image available."
        echo "* Trying to get current base image."
        download_base_image
        [[ "$curl_fail" ]] && "* Download failed. Using existing image." || \
            echo ""
        else
            echo "* Base image file is current."
        fi
}


if [ ! -f $(abspath "$srcdir")/$base_image ]; then
        download_base_image
    else
        check_for_current_image
fi

docker_args+="-v $(abspath "$srcdir")/$base_image:/$base_image "

# For ccache
#docker_args+="-e CCACHE_DIR=/ccache --volumes-from ccache -v ccache:/ccache "
docker_args+="-e CCACHE_DIR=/cache/ccache -v $cache_volume:/cache "

# Store apt-cache on cache volume too
docker_args+="-e src_cache=/cache/src_cache "

# Store remote src cache on ccache volume too
docker_args+="-e apt_cache=/cache/apt_cache "

# Let XZ be disabled.
[[ -v NOXZ ]] && docker_args+="-e NOXZ=${NOXZ} "

# Is an email local variable set?
[[ -v EMAIL ]] && docker_args+="-e EMAIL=${EMAIL} "

# Is a XDELTA local variable set? (Can not use XDELTA since XDELTA uses that itself.)
[[ -v DELTA ]] && docker_args+="-e DELTA=${DELTA} "

# Send in columns for display.
shopt -s checkwinsize 
size=$(stty size) 
lines=${size% *}
console_cols=${size#* }
docker_args+="-e COLS=${console_cols} "

# Export container id
cidfile="$(cd $PROG_DIR; pwd)/build.cid"
docker_args+="--cidfile=$cidfile "

# If the build script fails, the log is still copied out.
#[ -e "/tmp/build.log" ] && cat /tmp/build.log > /output/build_fail.log || exit 0
#startcmd='/build-rpi4.sh ; ls -crGg /flag > /output/build_fail_status.log ; [ -e "/tmp/build.log" ] && (mv /tmp/build.log /tmp/build_fail.log; cp /tmp/*.log /output/ ; chown $USER:$GROUP /output/*.log )  || exit 0'
startcmd='/build-rpi4.sh ;  [ -e "/tmp/build.log" ] && (ls -crGg /flag > /tmp/build_fail_status.log ; mv /tmp/build.log /tmp/build_fail.log; cp /tmp/*.log /output/ ; chown $USER:$GROUP /output/*.log )  || exit 0'
# Clear old build failure log file.
rm -f $outdir/build_fail.log
rm -rf $outdir/build_fail_status.log
rm -rf $outdir/*.install.log
rm -rf $outdir/*.compile.log

#cmd="docker run $docker_args $image /bin/bash -c $startcmd"

# Create Docker ccache volume if it does not exist as per https://stackoverflow.com/revisions/39652117/2
echo "Creating docker cache volume $cache_volume if it does not exist."
docker volume create --name $cache_volume

#Remove existing build container if it exists.
#docker rm -v $build_container_name

# docker create -v /mnt/ccache:/ccache --name ccache $image
echo "Running build in docker:"
echo "rm -f $cidfile ; docker run $docker_args $image /bin/bash -c \"$startcmd\""
rm -f $cidfile ; docker run $docker_args $image /bin/bash -c "$startcmd"
build_cid=`cat $cidfile`
# Following does not work.
# read build_cid <$cidfile
# echo $build_cid
echo ""

# Now lower priority of container.
# From https://unix.stackexchange.com/posts/317605/revisions

PID_LIST=
container_pid=`pgrep build-rpi4.sh`
findpids() {
        for pid in /proc/$1/task/* ; do
                pid="$(basename "$pid")"
                PID_LIST="$PID_LIST$pid "
                for cpid in $(cat /proc/$1/task/$pid/children) ; do
                        findpids $cpid
                done
        done
}

findpids $container_pid

echo "Using sudo to renice build container to lowest priority:"
echo "(Some renices are expected to fail.)"
sudo renice -n 20 -p $PID_LIST &> /dev/null || true
echo -e "Note that the command to open a shell into this docker instance would be:\n"
echo -e "docker exec -it `cat ~/rpi4-build/docker-rpi4-imagebuilder/build.cid` /bin/bash\n"
#echo "columns: $columns COLUMNS: $COLUMNS"
echo "Tailing build log:"
tail_log_cmd="docker exec -it $build_cid tail -F /tmp/build.log" 
echo $tail_log_cmd
echo ""
exec /bin/bash -c "if ! (${tail_log_cmd}); then [ -e ${outdir}/build_fail.log ] && tail ${outdir}/build_fail.log; fi || true"
